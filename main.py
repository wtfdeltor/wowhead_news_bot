# wowhead_news_bot_mvp (–±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥ —á–µ—Ä–µ–∑ LibreTranslate)

import feedparser
import requests
import os
from datetime import datetime
from bs4 import BeautifulSoup

# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ GitHub Secrets –∏–ª–∏ .env
TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_TOKEN")
TELEGRAM_CHANNEL = os.getenv("TELEGRAM_CHANNEL")
GITHUB_PAGES_URL = os.getenv("PAGES_URL")  # –Ω–∞–ø—Ä–∏–º–µ—Ä: https://username.github.io/wow
WOWHEAD_RSS = "https://www.wowhead.com/news/rss/all"
HEADERS = {"User-Agent": "Mozilla/5.0"}

def fetch_latest_article():
    print("üîÅ –ó–∞–≥—Ä—É–∂–∞–µ–º RSS-—Ñ–∏–¥...")
    response = requests.get(WOWHEAD_RSS, headers=HEADERS)

    if response.status_code != 200:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ RSS: {response.status_code}")
        return None

    print(f"üßæ –ó–∞–≥–æ–ª–æ–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞: {response.headers}")
    print(f"üîç Content-Type: {response.headers.get('Content-Type')}")
    print("üìÑ –ü–µ—Ä–≤—ã–µ 500 —Å–∏–º–≤–æ–ª–æ–≤ –æ—Ç–≤–µ—Ç–∞:")
    print(response.text[:500])

    feed = feedparser.parse(response.content)
    print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: {len(feed.entries)}")

    if not feed.entries:
        print("‚ùó RSS –ø—É—Å—Ç, –≤–æ–∑–º–æ–∂–Ω–æ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –∏–ª–∏ —Ñ–æ—Ä–º–∞—Ç –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω")
        return None

    entry = feed.entries[0]
    return {
        "title": entry.title,
        "link": entry.link,
        "published": entry.published,
        "summary": BeautifulSoup(entry.summary, "html.parser").get_text(),
    }

def translate_text(text):
    print("üåê –ü–µ—Ä–µ–≤–æ–¥ —á–µ—Ä–µ–∑ LibreTranslate...")
    url = "https://libretranslate.de/translate"  # —Å—Ç–∞–±–∏–ª—å–Ω—ã–π –ø—É–±–ª–∏—á–Ω—ã–π —Ö–æ—Å—Ç
    payload = {
        "q": text,
        "source": "en",
        "target": "ru",
        "format": "text"
    }
    headers = {
        "Content-Type": "application/json",
        "Accept": "application/json"
    }
    response = requests.post(url, json=payload, headers=headers)
    response.raise_for_status()
    if "application/json" not in response.headers.get("Content-Type", ""):
        print("‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç, –Ω–µ JSON:", response.text[:500])
        raise Exception("–°–µ—Ä–≤–∏—Å –ø–µ—Ä–µ–≤–æ–¥–∞ –≤–µ—Ä–Ω—É–ª –Ω–µ JSON")
    try:
        return response.json()["translatedText"]
    except Exception as e:
        print("‚ùå –û—à–∏–±–∫–∞ —Ä–∞–∑–±–æ—Ä–∞ –æ—Ç–≤–µ—Ç–∞ –æ—Ç LibreTranslate:", response.text)
        raise e

def generate_html(title, content, original_link):
    safe_title = title.lower().replace(" ", "-").replace(".", "").replace("/", "-")[:60]
    filename = safe_title + ".html"
    filepath = os.path.join("public", "posts", filename)
    html = f"""
    <html>
    <head><meta charset='UTF-8'><title>{title}</title></head>
    <body>
    <h1>{title}</h1>
    <p><i>–û—Ä–∏–≥–∏–Ω–∞–ª: <a href='{original_link}'>{original_link}</a></i></p>
    <hr>
    <p>{content}</p>
    </body></html>
    """
    os.makedirs(os.path.dirname(filepath), exist_ok=True)
    with open(filepath, "w", encoding="utf-8") as f:
        f.write(html)
    return filename

def post_to_telegram(title, link, summary):
    preview = f"<b>{title}</b>\n{summary[:200]}...\n<a href='{link}'>–ß–∏—Ç–∞—Ç—å –ø–æ–ª–Ω–æ—Å—Ç—å—é</a>"
    requests.post(
        f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/sendMessage",
        data={
            "chat_id": TELEGRAM_CHANNEL,
            "text": preview,
            "parse_mode": "HTML",
            "disable_web_page_preview": False,
        },
    )

if __name__ == "__main__":
    article = fetch_latest_article()
    if not article:
        print("‚ö†Ô∏è –ù–æ–≤–æ—Å—Ç–µ–π –Ω–µ—Ç ‚Äî –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å–∫—Ä–∏–ø—Ç–∞.")
        exit(0)

    translated_title = translate_text(article["title"])
    translated_summary = translate_text(article["summary"])
    filename = generate_html(translated_title, translated_summary, article["link"])
    full_url = f"{GITHUB_PAGES_URL}/posts/{filename}"
    post_to_telegram(translated_title, full_url, translated_summary)
